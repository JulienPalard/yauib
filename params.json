{"name":"Yauib","tagline":"Yet Another Useless IRC Bot","body":"### Introduction\r\n\r\nYauib is an IRC bot calling executables files in a hook folder to react to events. So you can write your bot's reactions in any language you want. If you want to test the bot, come on our channel #zomgffs@quakenet.org\r\n\r\n### Dependencies\r\nThere's only two dependencies, irclib and argparse :\r\n* On debian, aptitude install python-irclib python-arparse\r\n* Or easy_install python-irclib python-argparse\r\n* Or DL them, irclib is from sourceforge http://sourceforge.net/projects/python-irclib/\r\n              and argparse is from http://code.google.com/p/argparse/\r\n\r\n### Simple Quick Start\r\n\r\nHere is a simple quick start using my simple hooks, so you don't have\r\nto write code.\r\n\r\n#### Fetch it\r\n```\r\n$ git clone git://github.com/JulienPalard/yauib.git && cd yauib\r\n```\r\n#### Launch it\r\n```\r\n$ ./ircbot.py connect 'irc.server.example.com' '#your_channel' 'your_bot_login'\r\n```\r\nNow your bot should appear on your channel.\r\n\r\n#### Configure hooks\r\nRemove the hook that say that you haven't read the README file :\r\n```\r\n$ rm -f hooks-enabled/pubmsg\r\n```\r\nNow it's the time to hook some events, let's bind the 'command' hook to public messages :\r\n```\r\n$ ( cd hooks-enabled && ln -s ../hooks-available/command pubmsg )\r\n```\r\n\r\nThe 'command' hook tries to call executables in the directory\r\n'commands-enabled' for everything said on the channel, with the first word\r\nas executable name, and other as arguments, so the next step is to choose\r\nsome commands.\r\n\r\n#### Select some basic commands\r\n\r\nLet's test them all ... you'll choose later :X\r\n````\r\n$ ( cd commands-enabled && for command in ../commands-available/*; do ln -s \"$command\"; done )\r\n```\r\n\r\n/!\\ Some commands will need writable directories like 'logs', 'db' or 'conf'\r\n\r\n#### Try it !\r\n\r\nNow try your bot writing 'say hello' on the channel :\r\nThe bot will run 'hooks-enabled/pubmsg' that points to\r\n'hooks-available/command'. hooks-available/commands receiving 'say\r\nhello' will call `commands-enabled/say hello`. say is, basically a\r\nshell script with 'echo $*' So it will echo hello, that will be\r\nwrote back by the bot on the channel.\r\n\r\n### I wanna write commands, how it works ?\r\n\r\nIf you don't want to write complicated hooks, just use my simple one, and write commands.\r\n\r\nYou first have to bind the `command` hook to `pubmsg` and `privmsg` hooks :\r\n```\r\n  $ ( cd hooks-enabled && ln -s ../hooks-available/command pubmsg )\r\n  $ ( cd hooks-enabled && ln -s ../hooks-available/command privmsg )\r\n```\r\n\r\nNow, for each received message, my 'command' hook will try to find an\r\nexecutable in the 'advanced-commands-enabled' directory, then in the\r\n'commands-enabled' directory, finally trying to run\r\n'commands-enabled/run'.\r\n\r\nSo you can write commands in any language you want, just make them\r\nread their arguments, and make them write to stdout. A command also\r\ncan put debugging information on stderr, the information will be\r\nlogged by the bot, you can run the bot with the -vvv option to get\r\nyour debug back to the screen.\r\n\r\nAs commands are only executables, you don't have to restart the bot to\r\nmake it see them, just add the file, and bim, it works.\r\n\r\n### Advanced commands\r\n\r\nAdvanced commands have to live in ./advanced-commands-available/\r\ndirectory, create a symbolink link in the ./advanced-commands-enabled/\r\nto make them callable for the 'command' hook, permitting you to\r\nenable/disable a command in a few seconds.\r\n\r\nCommands in the advanced-commands-enabled permits you to return raw\r\nmessages directly to the IRC server, permitting you to send messages,\r\nkicks, bans, join, whatever you want, you have to understand the IRC\r\nprotocol to use them.\r\n\r\n### Basic commands\r\n\r\nBasic commands have to live in ./commands-available/\r\ndirectory, create a symbolink link in the ./commands-enabled/\r\nto make them callable for the 'command' hook, permitting you to\r\nenable/disable a command in a few seconds.\r\n\r\nA basic command can only reply with text, so don't worry about IRC\r\nprotocol, don't worry about multiline responses, don't worry about\r\nresponse length limit, just write something to stdout it will be sent\r\nback to the one who called the command.\r\n\r\nA basic command writing a calendar on the channel should be named cal,\r\nand only contain :\r\n```\r\n#!/bin/sh\r\ncal\r\n```\r\n### I wanna write hooks, how it works ?\r\n\r\nYAUIB is a very basic bot that, for each event received from IRC will\r\ncall a hook in the directory ./hooks-enabled/, so write your own\r\nhooks, in every language you want.\r\n\r\n#### Hooks protocol\r\nHooks reply can have two forms :\r\n\r\n * Form 1: Prefix your response by 'RAW ' and every following lines\r\n   will be sent to the server.\r\n\r\n * Form 2: Prefix your response by 'MSG ', put a target (typically\r\n   argv[3] if you wanna reply), and your response. Responses from MSG\r\n   can follow on multiples lines, each line will be sent to the\r\n   server, delayed from 1 second, to avoid being kiked too early for\r\n   flood, your response will also be splitted in multiples lines if\r\n   it's too long, so just don't worry when using this form.\r\n\r\n#### On which hooks can I hook my scripts ?\r\n\r\nTypical usefull commands are :\r\n * all_raw_messages : Get all messages from IRC server, do whatever you want.\r\n     Specific parameters : Only the full message, in one parameter\r\n * pubmsg : Hook on public messages\r\n     Specific parameters : Only the sentence, in one parameter\r\n * privmsg : Hook on private messages\r\n     Specific parameters : Only the sentence, in one parameter\r\n\r\nThere are tons of other hooks ( > 100 ) from irclib and I didn't know\r\nthem all so watch your logs to catch those you want. (And document\r\ntheir parameters here ?)\r\n\r\n#### Which parameters are sent to hooks ?\r\n\r\nParameter 1, 2, 3 and 4 are :\r\nsource login, source host, target login, and target host\r\nfollowed by command-specific parameters.\r\n\r\nThere is a directory to store every hooks, that is hooks-available so you\r\nshould enable only some needed, creating symlinks in the directory\r\nhooks-enabled.\r\n\r\nThere is a usefull default hook I wrote for you, it's named 'command'.\r\nIt executes commands that it find in the directory commands-enabled\r\nso you have to create some symlinks from the directory commands-available\r\nwhere I stored the commands I wrote.\r\n\r\nNOTE: You don't have to restart the bot when you change / add a hook.\r\n\r\nSo a very basic 'parrot' hook should be :\r\n```\r\n#!/bin/sh\r\nshift 4 # Drop sender login and host, target login and host\r\nprintf \"%s\\n\" \"$*\"\r\n```\r\n\r\n### Is there another way to make the bot speak ?\r\n\r\nYes, the bot is listening on a local port, by default 6668.\r\nEverything received on this port is wrote back to the channel.\r\nSo a simple :\r\n```\r\n$ echo foo | netcat localhost 6668\r\n```\r\nwill do the trick, but you should also try :\r\n```\r\n$ ./ircbot.py say foo\r\n```\r\ndoes the same !\r\n\r\nWith this feature you can push messages from cron, webpages or\r\neverything else.\r\n","google":"UA-268798-13","note":"Don't delete this file! It's used internally to help with page regeneration."}